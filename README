PyBugz - Python Bugzilla Interface
----------------------------------

Bugzilla has a very inefficient user interface, so I've written a
command line utility to interact with it. This is mainly done to help
me with closing bugs on Gentoo Bugzilla by grabbing patches, ebuilds
and so on.

Author
------
Alastair Tse <alastair@liquidx.net>. Copyright (c) 2006 under GPL-2.

Features
--------
* Searching bugzilla
* Listing details of a bug including comments and attachments
* Downloading/viewing attachments from bugzilla
* Posting bugs, comments, and making changes to an existing bug.
* Adding attachments to a bug.

Configuration
-------------
~/.bugzrc:

[gentoo]
base: https://bugs.gentoo.org/
user: abc@def.com
password: secret

[other]
base: http://my.project.com/bugzilla/
user: xyz@zyx.org
password: secret2
httpuser: xyz
httppassword: secret2
forget: True
columns: 80
encoding: utf-8
quiet: True

You can pass login informations either from rc-file or from command line
arguments:
$ bugz -d gentoo [action]
OR
$ bugz -b 'http://bugs.gentoo.org/' -u 'user' -p 'password' [action]

If the forget option is 'False', a cookie is placed in the users home
directory and last login will remembered.

Usage/Workflow
--------------

PyBugz comes with a command line interface called "bugz". It's
operation is similar in style to cvs/svn where a subcommand is
required for operation. 

To explain how it works, I will use a typical workflow for Gentoo
development. 

The most of this commands just works after a valid authentication (see
steps above).

1) Searching bugzilla for bugs I can fix, I'll run the command:
---------------------------------------------------------------

$ bugz search "version bump" --assigned liquidx@gentoo.org

 * Using http://bugs.gentoo.org/ ..
 * Searching for "version bump" ordered by "number"
 101968 liquidx              net-im/msnlib version bump
 125468 liquidx              version bump for dev-libs/g-wrap-1.9.6
 130608 liquidx              app-dicts/stardict version bump: 2.4.7

2) Narrow down on bug #101968, I can execute:
---------------------------------------------

$ bugz get 101968

 * Using http://bugs.gentoo.org/ ..
 * Getting bug 130608 ..
Title       : app-dicts/stardict version bump: 2.4.7
Assignee    : liquidx@gentoo.org
Reported    : 2006-04-20 07:36 PST
Updated     : 2006-05-29 23:18:12 PST
Status      : NEW
URL         : http://stardict.sf.net
Severity    : enhancement
Reporter    : dushistov@mail.ru
Priority    : P2
Comments    : 3
Attachments : 1

[ATTACH] [87844] [stardict 2.4.7 ebuild]

[Comment #1] dushistov@----.ru : 2006-04-20 07:36 PST
...

3) Now this bug has an attachment submitted by the user, so I can
   easily pull that attachment in:
-----------------------------------------------------------------

$ bugz attachment 87844

 * Using http://bugs.gentoo.org/ ..
 * Getting attachment 87844
 * Saving attachment: "stardict-2.4.7.ebuild"

4) If the ebuild is suitable, we can commit it using our normal
   repoman tools, and close the bug.
---------------------------------------------------------------

$ bugz modify 130608 --fixed -c "Thanks for the ebuild. Committed to
  portage" 

or if we find that the bug is invalid, we can close it by using:

$ bugz modify 130608 --invalid -c "Not reproducable"

Other options
-------------

There is extensive help in `bugz --help` and `bugz <subcommand>
--help` for additional options. 

bugz.py can be easily adapted for other bugzillas by changing
BugzConfig to match the configuration of your target
bugzilla. However, I haven't spent much time on using it with other
bugzillas out there. If you do have changes that will make it easier,
please let me know.

