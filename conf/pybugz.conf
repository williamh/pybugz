# ===========================================================================
#       The "root" configuration file of PyBugz bugzilla interface.
# ===========================================================================
#
# Overview
# ========
#   PyBugz is configured by hierarchy of *.conf files.  All the configuration
#   job starts from this file.  User specific configuration is by default in
#   file ~/.bugzrc.  This is specially usefull to allow user to redefine some
#   system configuration (an example could be adding user's credentials
#   for specific connection — see the following text).
#
# Syntax
# ======
#   The syntax is similar to Windows INI files.  For more info, see the
#   documentation for python's ConfigParser library class — this class is used
#   for parsing configuration files here.  Quickly, each file consists of
#   sections (section's name in brackets, e.g. [section]).  Each section
#   consists of set of configuration options separated by newlines:
#
#       [sectionName]
#       optionA = value A
#       optionB = this is value of B # comments are possible
#
# Section types
# =============
#   Currently, there are implemented three types of sections in PyBugz.  Those
#   are  'settings', 'default' and 'connection'.
#   Type 'settings' has purpose for setting up some global feature of PyBugz.
#   The type 'connection', however, describes attributes of particular
#   connection to some concrete instance of bugzilla.
#
# +------------+
# | Connection |
# +------------+
#
#   Important property of this type is its section identifier (name of
#   section).  By passing this name as an argument of --connection option is
#   PyBugz's user able to select which connection will be used.
#
#   Accepted options / semantics
#   ----------------------------
#
#   Note that you may specify each connection multiple times (using the same
#   ID).  All settings are combined among same named sections with one rule:
#   the last one wins.  This is important when you want to specify some defaults
#   system wide and let particular user redefine (or correct) concrete
#   connection — user's configuration is loaded _later_ than system's.
#
#   * base
#       Sets up the xmlrpc entrance into bugzilla, for example:
#       https://bugzilla.redhat.com/xmlrpc.cgi
#
#   * user & password
#       These two options let you specify your login information to bugzilla
#       instance (you must be registered there of course).  It is also
#       possible to encode a user (usually user's email) and password into
#       base:
#         http://myhttpname:myhttppasswd@my.project.com/bugzilla/xmlrpc.cgi
#       Note that if you don't specify your login information, you will be
#       prompted for them.
#
#   * passwordcmd
#       As an alternative to keeping your password in this file you can
#       provide a password command.  It is evaluated and pybugz expects this
#       command to output the password to standard out. E.g.:
#
#         passwordcmd = gpg2 --decrypt /myhome/.my-encrypted-password.gpg
#
#   * columns
#       The number of columns your terminal can display (or you want to be
#       displayed) during using of this connection.  Expects integer number.
#
#   * query_statuses
#       List of bug-statuses to be displayed by default (when *not* redefined by
#       --status option).  Accepts list of properly spelled statuses separated
#       by single space, e.g.:  query_statuses = ASSIGNED CLOSED
#
#   * encoding
#       Set the output encoding for PyBugz.  Default is utf-8.
#
#   * quiet
#       Run this connection in quiet mode when: quiet = True.
#
#   * inherit
#       This allows you to specify which connection's options should be used as
#       defaults for this connection.  By default this is set to the [default]
#       connection.
#
# +----------+
# | settings |
# +----------+
#
#   Again, this lets you define PyBugz "global" options (among all connections).
#   The name of section *must* be [settings].  Same as connection sections, even
#   this type of section you may define multiple times — options are combined
#   then (and the latest wins).
#
#   There are several accepted options:
#
#   * homeconf
#       Let's you define where to look for user's configuration file.  This is
#       by default ~/.bugzrc file.  Note that this option makes sense only for
#       system-wide configuration file.
#
#   * confdir
#       This option lets you define the configuration directory.  This directory
#       is searched for *.conf files, and these files (if any) are parsed
#       immediately after specifying configuration file.
#
#   * connection
#       Lets you define the default connection (when the --connection option is
#       not passed).
#
# +---------+
# | default |
# +---------+
#
#   Default section has the same semantics like connection.  It specifies
#   implicit configuration options to be used if they are not defined by
#   actually used connection (and also are not defined by pybugz program
#   arguments).  Default section must be exactly named [default].

[settings]

homeconf = ~/.bugzrc
confdir = /etc/pybugz/conf.d/
connection = Gentoo

[default]

query_statuses = ALL
encoding = utf-8
quiet = False
